version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: eventmanager_db
    environment:
      POSTGRES_DB: eventmanager
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - eventmanager_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: eventmanager_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - eventmanager_network

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: eventmanager_backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://admin:password123@postgres:5432/eventmanager
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-jwt-secret-key
      PORT: 5000
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - eventmanager_network
    command: npm run dev

  # AI/ML Service
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: eventmanager_ai
    environment:
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://admin:password123@postgres:5432/eventmanager
    ports:
      - "8000:8000"
    volumes:
      - ./ai-service:/app
    depends_on:
      - postgres
      - redis
    networks:
      - eventmanager_network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: eventmanager_frontend
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_AI_SERVICE_URL: http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - eventmanager_network
    command: npm run dev

volumes:
  postgres_data:
  redis_data:

networks:
  eventmanager_network:
    driver: bridge
